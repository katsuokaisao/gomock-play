// Code generated by MockGen. DO NOT EDIT.
// Source: player.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/katsuokaisao/gomock-play/model"
)

// MockPlayerRepository is a mock of PlayerRepository interface.
type MockPlayerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerRepositoryMockRecorder
}

// MockPlayerRepositoryMockRecorder is the mock recorder for MockPlayerRepository.
type MockPlayerRepositoryMockRecorder struct {
	mock *MockPlayerRepository
}

// NewMockPlayerRepository creates a new mock instance.
func NewMockPlayerRepository(ctrl *gomock.Controller) *MockPlayerRepository {
	mock := &MockPlayerRepository{ctrl: ctrl}
	mock.recorder = &MockPlayerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerRepository) EXPECT() *MockPlayerRepositoryMockRecorder {
	return m.recorder
}

// GetPlayerList mocks base method.
func (m *MockPlayerRepository) GetPlayerList(arg0 context.Context) ([]model.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerList", arg0)
	ret0, _ := ret[0].([]model.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerList indicates an expected call of GetPlayerList.
func (mr *MockPlayerRepositoryMockRecorder) GetPlayerList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerList", reflect.TypeOf((*MockPlayerRepository)(nil).GetPlayerList), arg0)
}
